/* =============================================================================
 *
 *
 * Yet unprocessed and unchecked unvanquished entities
 * 
 *
 * ============================================================================= */

/*QUAKED func_bobbing (0 .5 .8) ? X_AXIS Y_AXIS
Solid entity that oscillates back and forth in a linear motion. By default, it will have an amount of displacement in either direction equal to the dimension of the brush in the axis in which it's bobbing. Entity bobs on the Z axis (up-down) by default. It can also emit sound if the "noise" key is set. Will crush the player when blocked.

=== KEYS ===
; speed: amount of time in seconds for one complete oscillation cycle (default 4).
; height: sets the amount of travel of the oscillation movement (default 32). 
; phase: sets the start offset of the oscillation cycle. Values must be 0 < phase < 1. Any integer phase value is the same as no offset (default 0).
; noise: path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav - See Notes).
; model2: path/name of model to include (eg: models/mapobjects/jets/jets01.md3).
; origin: alternate method of setting XYZ origin of sound and .md3 model included with entity (See Notes).
; light: constantLight radius of .md3 model included with entity. Has no effect on the entity's brushes (default 0).
; color: constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1).

=== Q3MAP2 KEYS ===
; _targetname: Used to attach a misc_model entity to this entity.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== Q3MAP2 TERRAIN KEYS ===
; _indexmap: Path/name for the art file used to guide the mapping of textures on the terrain surface.
; _layers: Integer value is the number unique root shaders that will be use on the terrain.
; _shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.

=== SPAWNFLAGS ===
; X_AXIS: entity will bob along the X axis.
; Y_AXIS: entity will bob along the Y axis.

=== NOTES ===
In order for the sound to be emitted from the entity, it is recommended to include a brush with an origin shader at its center, otherwise the sound will not follow the entity as it moves. Setting the origin key is simply an alternate method to using an origin brush. When using the model2 key, the origin point of the model will correspond to the origin point defined by either the origin brush or the origin coordinate value.
Target this entity with a misc_model to have the model attached to the entity (set the model's "target" key to the same value as this entity's "targetname").
*/

/*QUAKED func_button (0 .5 .8) ?
When a button is touched by a player, it moves in the direction set by the "angle" key, triggers all its targets, stays pressed by an amount of time set by the "wait" key, then returns to it's original position where it can be operated again.

=== KEYS ===
; angle: determines the direction in which the button will move (up = -1, down = -2).
; target: all entities with a matching targetname will be triggered.
; speed: speed of button's displacement (default 40).
; wait: number of seconds button stays pressed (default 1, -1 = return immediately).
; lip: lip remaining at end of move (default 4 units).
; health: (default 0) if set to any non-zero value, the button must take damage (any amount) to activate.
; light: constantLight radius of .md3 model included with entity. Has no effect on the entity's brushes (default 0).
; color: constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1).
; model2: path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3).
; origin: alternate method of setting XYZ origin of .md3 model included with entity (See Notes).
; sound1to2: the sound played when the door, platform or button moves from state 1 to state 2.

=== Q3MAP2 KEYS ===
; _targetname: Used to attach a misc_model entity to this entity.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== Q3MAP2 TERRAIN KEYS ===
; _indexmap: Path/name for the art file used to guide the mapping of textures on the terrain surface.
; _layers: Integer value is the number unique root shaders that will be use on the terrain.
; _shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.

=== NOTES ===
Setting the origin key is simply an alternate method to using an origin brush. When using the model2 key, the origin point of the model will correspond to the origin point defined by either the origin brush or the origin coordinate value.
Target this entity with a misc_model to have the model attached to the entity (set the model's "target" key to the same value as this entity's "targetname").
*/

/*QUAKED func_door (0 .5 .8) ? START_OPEN - CRUSHER
Normal sliding door entity. By default, the door will activate when player walks close to it or when damage is inflicted to it.

=== KEYS ===
; angle: determines the opening direction of door (up = -1, down = -2).
; speed: determines how fast the door moves (default 100).
; wait: number of seconds before door returns (default 2, -1 = return immediately)
; lip: lip remaining at end of move (default 8)
targetname: if set, a func_button or trigger is required to activate the door.
; health: (default 0) if set to any non-zero value, the door must take damage (any amount) to activate.
; dmg: damage to inflict on player when he blocks operation of door (default 4). Door will reverse direction when blocked unless CRUSHER spawnflag is set.
; team: assign the same team name to multiple doors that should operate together (see Notes).
; light: constantLight radius of .md3 model included with entity. Has no effect on the entity's brushes (default 0).
; color: constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1).
; model2: path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3).
; origin: alternate method of setting XYZ origin of .md3 model included with entity (See Notes).
; sound1to2: the sound played when the door, platform or button moves from state 1 to state 2.
; sound2to1: the sound played when the door or platform moves from from state 2 to state 1.
; soundPos2: the sound played when the door or platform reaches state 2.
; soundPos1: the sound played when the door or platform reaches state 1.

=== Q3MAP2 KEYS ===
; _targetname: Used to attach a misc_model entity to this entity.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== Q3MAP2 TERRAIN KEYS ===
; _indexmap: Path/name for the art file used to guide the mapping of textures on the terrain surface.
; _layers: Integer value is the number unique root shaders that will be use on the terrain.
; _shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.

=== SPAWNFLAGS ===
; START_OPEN: the door will spawn in the open state and operate in reverse.
; CRUSHER: door will not reverse direction when blocked and will keep damaging player until he dies or gets out of the way.

=== NOTES ===
Unlike in Quake 2, doors that touch are NOT automatically teamed. If you want doors to operate together, you have to team them manually by assigning the same team name to all of them. Setting the origin key is simply an alternate method to using an origin brush. When using the model2 key, the origin point of the model will correspond to the origin point defined by either the origin brush or the origin coordinate value.
Target this entity with a misc_model to have the model attached to the entity (set the model's "target" key to the same value as this entity's "targetname").
*/

/*QUAKED func_door_model (0 .5 .8) ?
A model based door entity. By default, the door will activate when player walks close to it. The opening and closing of the door is provided by an animation in the model itself.

=== KEYS ===
; speed: determines the time taken for the door to change state in msec (default 200).
; wait: number of seconds before door returns (default 2)
; targetname: if set, a func_button or trigger is required to activate the door.
; health: (default 0) if set to any non-zero value, the door must take damage (any amount) to activate.
; team: assign the same team name to multiple doors that should operate together (see Notes).
; light: constantLight radius of .md3 model included with entity. Has no effect on the entity's brushes (default 0).
; color: constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1).
; model2: path/name of the door model (eg: models/mapobjects/pipe/pipe02.md3).
; modelOrigin: means of setting the origin of the model.
; scale: scale the model in each of the major axes (e.g. 1.0 1.0 2.0 -- twice as high as normal).
; animation: The first frame and number of frames in the door open animation (e.g. 0 10). This will be reversed for the close animation.
; sound1to2: the sound played when the door, platform or button moves from state 1 to state 2.
; sound2to1: the sound played when the door or platform moves from from state 2 to state 1.
; soundPos2: the sound played when the door or platform reaches state 2.
; soundPos1: the sound played when the door or platform reaches state 1.

=== Q3MAP2 KEYS ===
; _targetname: Used to attach a misc_model entity to this entity.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== Q3MAP2 TERRAIN KEYS ===
; _indexmap: Path/name for the art file used to guide the mapping of textures on the terrain surface.
; _layers: Integer value is the number unique root shaders that will be use on the terrain.
; _shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.

=== NOTES ===
Every func_door_model needs its model to be positioned, scaled and orientated using the modelOrigin, scale and angle/angles keys repsectively.
*/

/*QUAKED func_door_rotating (0 .5 .8) ? START_OPEN - CRUSHER REVERSE - X_AXIS Y_AXIS
Rotating door entity. By default, the door will activate when player walks close to it.

=== KEYS ===
; speed: determines how fast the door moves (in degrees/second).
; rotatorAngle: the number of degrees through which to rotate (default 90).
; wait: number of seconds before door returns (default 2)
; targetname: if set, a func_button or trigger is required to activate the door.
; health: (default 0) if set to any non-zero value, the door must take damage (any amount) to activate.
; dmg: damage to inflict on player when he blocks operation of door (default 4). Door will reverse direction when blocked unless CRUSHER spawnflag is set.
; team: assign the same team name to multiple doors that should operate together (see Notes).
; light: constantLight radius of .md3 model included with entity. Has no effect on the entity's brushes (default 0).
; color: constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1).
; model2: path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3).
; origin: alternate method of setting XYZ origin of .md3 model included with entity (See Notes).
; sound1to2: the sound played when the door, platform or button moves from state 1 to state 2.
; sound2to1: the sound played when the door or platform moves from from state 2 to state 1.
; soundPos2: the sound played when the door or platform reaches state 2.
; soundPos1: the sound played when the door or platform reaches state 1.

=== Q3MAP2 KEYS ===
; _targetname: Used to attach a misc_model entity to this entity.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== Q3MAP2 TERRAIN KEYS ===
; _indexmap: Path/name for the art file used to guide the mapping of textures on the terrain surface.
; _layers: Integer value is the number unique root shaders that will be use on the terrain.
; _shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.

=== SPAWNFLAGS ===
; START_OPEN: the door will spawn in the open state and operate in reverse.
; CRUSHER: door will not reverse direction when blocked and will keep damaging player until he dies or gets out of the way.
; REVERSE: the door will open the other way.
; X_AXIS: rotate on the X axis instead of the Z.
; Y_AXIS: rotate on the Y axis instead of the Z.

=== NOTES ===
Unlike in Quake 2, doors that touch are NOT automatically teamed. If you want doors to operate together, you have to team them manually by assigning the same team name to all of them. Setting the origin key is simply an alternate method to using an origin brush. When using the model2 key, the origin point of the model will correspond to the origin point defined by either the origin brush or the origin coordinate value.
Target this entity with a misc_model to have the model attached to the entity (set the model's "target" key to the same value as this entity's "targetname").
You need to have an origin brush as part of this entity.  The center of that brush will be the point around which it is rotated. It will rotate around the Z axis by default.  You can check either the X_AXIS or Y_AXIS box to change that.
*/

/*QUAKED func_pendulum (0 .5 .8) ?
Solid entity that describes a pendulum back and forth rotation movement. Rotates on the X axis by default. Pendulum frequency is a physical constant based on the length of the beam and gravity. Blocking the pendulum instantly kills a player.

=== KEYS ===
; angle: angle offset of axis of rotation from default X axis (default 0).
; speed: angle of swing arc in either direction from initial position (default 30).
; phase: sets the start offset of the swinging cycle. Values must be 0 < phase < 1. Any integer phase value is the same as no offset (default 0).
; noise: path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav).
; model2: path/name of model to include (eg: models/mapobjects/jets/jets01.md3).
; origin: alternate method of setting XYZ origin of entity's rotation axis and .md3 model included with entity (default "0 0 0" - See Notes).
; light: constantLight radius of .md3 model included with entity. Has no effect on the entity's brushes (default 0).
; color: constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1).

=== Q3MAP2 KEYS ===
; _targetname: Used to attach a misc_model entity to this entity.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== Q3MAP2 TERRAIN KEYS ===
; _indexmap: Path/name for the art file used to guide the mapping of textures on the terrain surface.
; _layers: Integer value is the number unique root shaders that will be use on the terrain.
; _shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.

=== NOTES ===
You need to have an origin brush as part of this entity. The center of that brush will be the point through which the rotation axis passes. Setting the origin key is simply an alternate method to using an origin brush. Pendulum will rotate along the X axis by default. Very crude operation: pendulum cannot rotate along Z axis, the speed of swing (frequency) is not adjustable. When using the model2 key, the origin point of the model will correspond to the origin point defined by either the origin brush or the origin coordinate value.
Target this entity with a misc_model to have the model attached to the entity (set the model's "target" key to the same value as this entity's "targetname").
*/

/*QUAKED func_plat (0 .5 .8) ? DONT_WAIT
Rising platform the player can ride to reach higher places. Plats must always be drawn in the raised position, so they will operate and be lighted correctly but they spawn in the lowered position. The plat will stay in the raised position until the player steps off. There are no proper sounds for this entity, only beep noises. It will spawn in the game and work properly but it sounds silly (see Notes).

=== KEYS ===
; speed: determines how fast the plat moves (default 150).
; lip: lip remaining at end of move (default 16). Has no effect if "height" is set.
; height: if set, this will determine the total amount of vertical travel of the plat.
; dmg: damage to inflict on player when he blocks operation of plat (default 4). Plat will reverse direction when blocked.
; targetname: if set, the trigger that points to this will raise the plat each time it fires. The plat raises and comes back down a second later if no player is on it.
; light: constantLight radius of .md3 model included with entity. Has no effect on the entity's brushes (default 0).
; color: constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1).
; model2: path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3).
; origin: alternate method of setting XYZ origin of .md3 model included with entity (See Notes).
; sound1to2: the sound played when the door, platform or button moves from state 1 to state 2.
; sound2to1: the sound played when the door or platform moves from from state 2 to state 1.
; soundPos2: the sound played when the door or platform reaches state 2.
; soundPos1: the sound played when the door or platform reaches state 1.

=== Q3MAP2 KEYS ===
; _targetname: Used to attach a misc_model entity to this entity.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== SPAWNFLAGS ===
; DONT_WAIT: The platform will not wait for a client to leave before returning to its original position.

=== Q3MAP2 TERRAIN KEYS ===
; _indexmap: Path/name for the art file used to guide the mapping of textures on the terrain surface.
; _layers: Integer value is the number unique root shaders that will be use on the terrain.
; _shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.

=== NOTES ===
By default, the total amount of vertical travel of a platform is implicitly determined by the overall vertical size of the brushes of which it's made minus the lip value. But if the "height" key is used, then the total amount of vertical travel of the plat will be exactly that value regardless of the shape and size of the plat and regardless of the value of the "lip" key. Using the "height" key is the best method for any kind of platforms and the only possible one for thin plats which need to travel vertical distances many times their own thickness. Setting the origin key is simply an alternate method to using an origin brush. When using the model2 key, the origin point of the model will correspond to the origin point defined by either the origin brush or the origin coordinate value.
There is a way to make plats play proper sounds. Just create a sound\movers\plats folder under baseq3 and put 2 sounds named pt1_strt.wav and pt1_end.wav in it. Those can be the renamed sounds from the Q2 plats or renamed copies of the sound\movers\doors sounds you can extract from your pak0.pk3 file or new custom sounds if you're up to it. Thanks to Fragzilla for the tip.
Target this entity with a misc_model to have the model attached to the entity (set the model's "target" key to the same value as this entity's "targetname").
*/

/*QUAKED func_rotating (0 .5 .8) ? - - X_AXIS Y_AXIS
Solid entity that rotates continuously. Rotates on the Z axis by default and requires an origin brush. It will always start on in the game and is not targetable.

=== KEYS ===
; speed: determines how fast entity rotates (default 100).
; noise: path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav).
; model2: path/name of model to include (eg: models/mapobjects/bitch/fembotbig.md3).
; origin: alternate method of setting XYZ origin of entity's rotation axis and .md3 model included with entity (default "0 0 0" - See Notes).
; light: constantLight radius of .md3 model included with entity. Has no effect on the entity's brushes (default 0).
; color: constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1).

=== Q3MAP2 KEYS ===
; _targetname: Used to attach a misc_model entity to this entity.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== Q3MAP2 TERRAIN KEYS ===
; _indexmap: Path/name for the art file used to guide the mapping of textures on the terrain surface.
; _layers: Integer value is the number unique root shaders that will be use on the terrain.
; _shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.

=== SPAWNFLAGS ===
; X_AXIS: entity will rotate along the X axis.
; Y_AXIS: entity will rotate along the Y axis.

=== NOTES ===
You need to have an origin brush as part of this entity. The center of that brush will be the point through which the rotation axis passes. Setting the origin key is simply an alternate method to using an origin brush. It will rotate along the Z axis by default. You can check either the X_AXIS or Y_AXIS box to change that. When using the model2 key, the origin point of the model will correspond to the origin point defined by either the origin brush or the origin coordinate value.
Target this entity with a misc_model to have the model attached to the entity (set the model's "target" key to the same value as this entity's "targetname").
*/

/*QUAKED func_static (0 .5 .8) ?
Static non-solid bspmodel. Can be used for conditional walls and models.

=== KEYS ===
; model2: path/name of model to include (eg: models/mapobjects/bitch/fembotbig.md3).
; origin: alternate method of setting XYZ origin of .md3 model included with entity (See Notes).
; light: constantLight radius of .md3 model included with entity. Has no effect on the entity's brushes (default 0).
; color: constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1).
; targetname: NOT SUPPORTED BY RENDERER - if set, a func_button or trigger can make entity disappear from the game (See Notes).

=== Q3MAP2 KEYS ===
; _targetname: Used to attach a misc_model entity to this entity.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== Q3MAP2 TERRAIN KEYS ===
; _indexmap: Path/name for the art file used to guide the mapping of textures on the terrain surface.
; _layers: Integer value is the number unique root shaders that will be use on the terrain.
; _shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.

=== NOTES ===
When using the model2 key, the origin point of the model will correspond to the origin point defined by either the origin brush or the origin coordinate value. If a model is included with a targeted func_static, the brush(es) of the entity will be removed from the game but the .md3 model won't: it will automatically be moved to the (0 0 0) world origin so you should NOT include an .md3 model to a targeted func_static.
Target this entity with a misc_model to have the model attached to the entity (set the model's "target" key to the same value as this entity's "targetname").
*/

/*QUAKED func_train (0 .5 .8) ? START_OFF BLOCK_STOPS
Trains are moving solids that follow a string of path_corner entities. Trains in Tremulous are less basic than in Q3A, they also require an origin brush (see Notes).

=== KEYS ===
; speed: speed of displacement of train (default 100 or overridden by speed value of path).
; target: this points to the first path_corner of the path which is also the spawn location of the train's origin.
; model2: path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3).
; origin: alternate method of setting XYZ origin of the train's brush(es) and .md3 model included with entity (See Notes).
; light: constantLight radius of .md3 model included with entity. Has no effect on the entity's brushes (default 0).
; color: constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1).

=== SPAWNFLAGS ===
; START_OFF: the train will spawn in the off state
; BLOCK_STOPS: with this set a train simply stops if blocked, instead of killing.

=== Q3MAP2 KEYS ===
; _targetname: Used to attach a misc_model entity to this entity.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== Q3MAP2 TERRAIN KEYS ===
; _indexmap: Path/name for the art file used to guide the mapping of textures on the terrain surface.
; _layers: Integer value is the number unique root shaders that will be use on the terrain.
; _shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.

=== NOTES ===
; 1. Trains instakill anything in their path by default.
; 2. Trains cannot emit sound.
; 3. When BLOCK_STOPS is set, trains cannot be stopped just by getting in their way, the player must be wedged between the train and another obstacle to block it.
; Setting the origin key is simply an alternate method to using an origin brush. When using the model2 key, the origin point of the model will correspond to the origin point defined by either the origin brush or the origin coordinate value.
; Target this entity with a misc_model to have the model attached to the entity (set the model's "target" key to the same value as this entity's "targetname").
*/

/*QUAKED info_player_intermission (1 0 1) (-8 -8 -8) (8 8 8)
Camera for intermission screen between matches. Can be aimed by setting the "angles" key or targeting an pointing to an aiming entity. Use only one per level.

=== KEYS ===
; angles: alternate "pitch, yaw, roll" angles method of aiming intermission camera (default 0 0 0).
; target: point this to an target_position entity to set the camera's pointing angles.
*/

/*QUAKED info_alien_intermission (1 0 1) (-8 -8 -8) (8 8 8)
Camera for aliens before they spawn. Can be aimed by setting the "angles" key or targeting an pointing to an aiming entity. Use one per level.

=== KEYS ===
; angles: alternate "pitch, yaw, roll" angles method of aiming intermission camera (default 0 0 0).
; target: point this to an target_position entity to set the camera's pointing angles.
*/

/*QUAKED info_human_intermission (1 0 1) (-8 -8 -8) (8 8 8)
Camera for humans before they spawn. Can be aimed by setting the "angles" key or targeting an pointing to an aiming entity. Use one per level.

=== KEYS ===
; angles: alternate "pitch, yaw, roll" angles method of aiming intermission camera (default 0 0 0).
; target: point this to an target_position entity to set the camera's pointing angles.
*/

/*QUAKED misc_model (1 .5 .25) (-16 -16 -16) (16 16 16) CASTSHADOW AUtOCLIP FORCEMETA
; Generic placeholder for inserting MD3 models in game. Requires compilation of map geometry to be added to level. If the map is compiled with Q3Map2, then ASE, 3DS, OBJ and other model formats are supported.

=== KEYS ===
; angle: direction in which model will be oriented.
; model: path/name of model to use (eg: models/mapobjects/teleporter/teleporter.md3).

=== Q3MAP2 KEYS ===
; angles: Individual control of PITCH, YAW, and ROLL (default 0 0 0).
; modelscale: Floating-point value used to scale a model up or down (default 1.0).
; modelscale_vec: Floating-point vector used to scale a model's axes individually (default 1.0 1.0 1.0).
; _remap: Used to remap textures/shaders in the model. To remap all shaders to a given shader, use "*;models/mymodel/mytexture". To remap a specific shader, use "models/mymodel/old;models/mymodel/new".
; target: Used to attach the misc_model to a brush entity, where its "targetname" key is the same value.
; _lightmapscale: Floating point value scaling the resolution of lightmaps on this model (if model is using lightmapped shaders) (default 1.0).
; _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
; _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
; _celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.

=== SPAWNFLAGS ===
; CASTSHADOW: Toggles the model casting shadows on the map surfaces.
; AUTOCLIP: Sets the autoclipping spawnflag, automatically assigning q3map_clipmodel to any shaders used by the model. Use of Q3Map2 autoclipping for models is only recommended for large models with relatively few triangles in their mesh (i.e. terrain). The Q3Map2 autoclipping algorithm is a bit of a hack, and can hurt in-game performance (as well as produce erroneous clipping results) when used on small, dense models.
; FORCEMETA: Sets the forcemeta spawnflag, automatically adding q3map_forcemeta to any shaders used by the model (which, in turn, allows the model to become lightmapped). This, effectively, is the "lightmapped model" spawnflag.
*/

/*QUAKED misc_anim_model (1 .5 .25) (-16 -16 -16) (16 16 16) TRIGGER_TOGGLE
A little like misc_model except that it is a game entity and does not become part of the map geometry. An instance of this entity will draw an arbituary md3 in the world with an arbituary frame or with an animation.

=== KEYS ===
; angle: direction in which model will be oriented.
; radius: The scale of the model compared to its original size. Defaults to 1.0.
; animation: The guts of the entity. This is identical to an entry in an animation.cfg - Start Frame, Number of frames, Looping Frames, Frame rate. For example 0 30 30 20 will play frames 0 through 30 continously at 20 fps.
; model: path/name of model to use (eg: models/mapobjects/teleporter/teleporter.md3).

=== SPAWNFLAGS ===
; TRIGGER_TOGGLE: With this set triggering the entity disables the model altogether as opposed to the regular behaviour of toggling the animation.
*/

/*QUAKED misc_particle_system (1 .5 .25) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
; A particle system entity.

=== KEYS ===
; psName: The name of the particle system to spawn at this entity.

=== SPAWNFLAGS ===
; SPAWN_DISABLED: Spawn disabled.

=== NOTES ===
Triggering this entity toggles it on and off.
*/

/*QUAKED misc_light_flare (.65 .65 1) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
A light flare entity.

=== KEYS ===
; targetShaderName: The name of the shader of the light flare.
; radius: The radius key is a vector.
; The first component is the size of the light flare. The radius is calculated by taking the distance of the viewer from the light flare and dividing by this key, so the larger the key value, the smaller the flare. Values between 2 and 10 are sensible.
; The second component indicates the angle around the direction the flare points for which it is visible. For example a value of 90 means that you can see the flare while infront of the entity, but not when behind it. If set to zero the light flare will be visible from any angle
; The third component is similar to the first except that it specifies the size of the light source rather than the size of the light flare itself. This is useful when the higher detail flare fading modes are enabled. If this is set to the same value as the first component, fading will commence as soon as the edge of the light flare is occluded by some surface between the viewer and the flare. If it is set larger the flare will overlap the occluding surface before it begins to fade.
; angles: This reflects which direction the flare points. It is not important unless the second component of the radius key is employed. angles is a vector of PITCH YAW ROLL. For example a value of "90 0 0" would create a flare pointing down. ROLL is redundant in this context and can be set arbitrarily.

=== SPAWNFLAGS ===
; SPAWN_DISABLED: Spawn disabled.

=== NOTES ===
; Triggering this entity toggles it.
*/

/*QUAKED misc_portal_camera (1 .5 .25) (-8 -8 -8) (8 8 8) SLOWROTATE FASTROTATE
Portal camera. This camera is used to project its view onto a portal surface in the level through the intermediary of a misc_portal_surface entity. Use the "angles" key or target a target_position entity to set the camera's pointing direction.

=== KEYS ===
; angles: this sets the pitch and yaw aiming angles of the portal camera (default 0 0). Use "roll" key to set roll angle.
; target: point this to a target_position entity to set the camera's pointing direction.
; targetname: a misc_portal_surface portal surface indicator must point to this.
; roll: roll angle of camera. A value of 0 is upside down and 180 is the same as the player's view.

=== SPAWNFLAGS ===
; SLOWROTATE: makes the portal camera rotate slowly along the roll axis.
; FASTROTATE: makes the portal camera rotate faster along the roll axis.

=== NOTES ===
; Both the setting "angles" key or "targeting a target_position" methods can be used to aim the camera. However, the target_position method is simpler. In both cases, the "roll" key must be used to set the roll angle. If either the SLOWROTATE or FASTROTATE spawnflag is set, then the "roll" value is irrelevant.
*/

/*QUAKED misc_portal_surface (1 .5 .25) (-8 -8 -8) (8 8 8)
Portal surface indicator. This will "lock on" the brush face closest to it and identify as a portal. The view displayed on the portal surface is the view of the misc_portal_camera that this entity targets. Also used for mirrors (see Notes).

=== KEYS ===
; target: point this to a misc_portal_camera that "sees" the view you want to display on the portal.

=== NOTES ===
; The entity must be no farther than 64 units away from the portal surface to lock onto it. To make a mirror, apply the common/mirror shader to the surface, place this entity near it but don't target a misc_portal_camera.
*/

/*QUAKED target_rumble (1 0 0) (-8 -8 -8) (8 8 8)
When triggered, this initiates a level-wide rumble effect. All players are affected.

=== KEYS ===
; speed: severity of the quake (default: 100)
; count: duration of the quake (default: 10)
*/

/*QUAKED target_kill (0 .5 0) (-8 -8 -8) (8 8 8)
This will kill the player who activates the trigger that fires this target.

=== KEYS ===
; targetname: the activating trigger points to this.
*/

/*QUAKED target_location (0 .5 0) (-8 -8 -8) (8 8 8)
Location marker used for team chats. The closest target_location in sight is used for the location. If none is in sight, the closest in distance is used.

=== KEYS ===
; message:  name of the location (text string). Displayed in parentheses in front of all team chat and order messages.
; count: color of the location text displayed in parentheses during team chat. Set to 0-7 for color.
   0: white (default)
   1: red
   2: green
   3: yellow
   4: blue
   5: cyan
   6: magenta
   7: white
*/

/*QUAKED target_print (0 .5 0) (-8 -8 -8) (8 8 8) HUMAN_TEAM ALIEN_TEAM PRIVATE
This will print a message on the center of the screen when triggered. By default, all the clients will see the message.

=== KEYS ===
; message: text string to print on screen.
; targetname: the activating trigger points to this.

=== SPAWNFLAGS ===
; HUMAN_TEAM: only the human team players will see the message.
; ALIEN_TEAM: only the alien team players will see the message.
; PRIVATE: only the player that activates the target will see the message.
*/

/*QUAKED target_push (.5 .5 .5) (-8 -8 -8) (8 8 8) BOUNCEPAD NOSOUND
This can be used to create jump pads and launch ramps. The direction of push can be set by the "angles" key or pointing to a target_position entity. Unlike trigger_push, this is NOT client side predicted and must be activated by a trigger.

=== KEYS ===
; angles: this sets the pitch and yaw aiming angles of push entity (default 0 0). The roll angle does not apply.
; speed: speed of push (default 1000). Has no effect if entity targets an aiming entity.
; targetname: the activating trigger points to this. Push originates from the location of the trigger.
; target: this points to the aiming entity to which the player will jump.

=== SPAWNFLAGS ===
; BOUNCEPAD: if set, trigger will play bounce noise instead of beep noise when activated (recommended).
; NOSOUND: if set, no sound is played at all

=== NOTES ===
; To make a jump pad or launch ramp, create a trigger_multiple where the jump must originate. Place the target_push directly above the trigger_multiple and place the target_position entity at the highest point of the jump. Target the trigger_multiple to the target_push and target the target_push to the target_position (or set the target_push's "angles" key). Note that the "angle" key also works.
*/

/*QUAKED target_score (0 .5 0) (-8 -8 -8) (8 8 8)
This is used to automatically give frag points to the player who activates this. A spawn location entity like info_player_* or CTF respawn points can target this entity to give points to the player when he spawns in the game. Or a trigger can also be used to activate this. The activator of the trigger will get the points.

=== KEYS ===
; targetname: ativating entity points to this.
; count: number of frag points to give to player (default 1).
*/

/*QUAKED target_teleporter (0 .5 0) (-8 -8 -8) (8 8 8)
Activating this will teleport players to the location of the targeted misc_teleporter_dest entity. Unlike trigger_teleport, this entity must be activated by a trigger and does NOT allow client prediction of events.

=== KEYS ===
; targetname: activating trigger points to this.
; target: this must point to a misc_teleporter_dest entity.
*/

/*QUAKED target_hurt (1 0 0) (-8 -8 -8) (8 8 8)
When triggered, this hurts the entity that caused the trigger.

=== KEYS ===
; dmg: amount of damage to deal (default: 5)
*/

/*QUAKED trigger_heal (.5 .5 .5) ? START_OFF SLOW
Any player that touches this will be healed. It does heal points of healage each server frame. Targeting the trigger will toggle its effects.

=== SPAWNFLAGS ===
; START_OFF: needs to be triggered (toggle) to activate.
; SLOW: changes the heal rate to once per second.

=== KEYS ===
; heal: Health points to heal (default 5)
*/

/*QUAKED trigger_ammo (.5 .5 .5) ? SLOW NOENERGY NOCASE
; Any player that touches this will have the ammo for his held weapon restored. It gives ammo in chunks reflected by the key "ammo" each server frame.

=== SPAWNFLAGS ===
; SLOW: changes the ammo rate to once per second.
; NOENERGY: disables this entity for energy weapons.
; NOCASE: disables this entity for case based weapons.

=== KEYS ===
; ammo: Amount of ammo to give (default 1)
*/

/*QUAKED trigger_gravity (.5 .5 .5) ?
The gravity (for players) within this trigger is determined by the gravity key. Targetting this entity toggles its effects.
NOT THROUGHLY TESTED: please report whether or not this works for you.

=== KEYS ===
; gravity: The gravity within this trigger (default 800).
*/

/*QUAKED trigger_buildable (.5 .5 .5) ? SPAWN_DISABLED NEGATE
; Triggered by a buildable or subset of buildables. If no buildables key is supplied every buildable will trigger this entity.
; Targetting this entity toggles it.
NOT THROUGHLY TESTED: please report whether or not this works for you.

=== KEYS ===
; target: this points to the entity to activate.
; buildables: a comma delimited list of buildables which will trigger this entity.
; wait: time in seconds until trigger becomes re-triggerable after it's been touched (default 0.2, -1 = trigger once).
; random: random time variance in seconds added or subtracted from "wait" delay (default 0 - see Notes).

=== SPAWNFLAGS ===
; SPAWN_DISABLED: needs to be triggered (toggle) to activate.
; NEGATE: negate the trigger condition.
*/

/*QUAKED trigger_class (.5 .5 .5) ? SPAWN_DISABLED NEGATE
; Triggered by a specific class or subset of classes. If no classes key is supplied every class will trigger this entity.
NOT THROUGHLY TESTED: please report whether or not this works for you.

=== KEYS ===
; target: this points to the entity to activate.
; classes: a comma delimited list of classes which will trigger this entity.
; wait: time in seconds until trigger becomes re-triggerable after it's been touched (default 0.2, -1 = trigger once).
; random: random time variance in seconds added or subtracted from "wait" delay (default 0 - see Notes).

=== SPAWNFLAGS ===
; SPAWN_DISABLED: needs to be triggered (toggle) to activate.
; NEGATE: negate the trigger condition.
*/

/*QUAKED trigger_equipment (.5 .5 .5) ? SPAWN_DISABLED NEGATE
Triggered by a player carrying some item (weapon or upgrade) or subset of items. If no equipment key is supplied every human will trigger this entity.
Targetting this entity toggles it.
NOT THROUGHLY TESTED: please report whether or not this works for you.

=== KEYS ===
; target: this points to the entity to activate.
; equipment: a comma delimited list of equipment which will trigger this entity.
; wait: time in seconds until trigger becomes re-triggerable after it's been touched (default 0.2, -1 = trigger once).
; random: random time variance in seconds added or subtracted from "wait" delay (default 0 - see Notes).

=== SPAWNFLAGS ===
; SPAWN_DISABLED: needs to be triggered (toggle) to activate.
; NEGATE: negate the trigger condition.
*/

/*QUAKED trigger_stage (.5 .5 .5) (-8 -8 -8) (8 8 8)
Fires its targets when the team key reaches stage key.
NOT THROUGHLY TESTED: please report whether or not this works for you.

=== KEYS ===
; target: this points to the entity to activate.
; team: the team which triggers this entity; 1 for aliens, 2 for humans
; stage: the stage at which this entity is triggered; 1 for stage 2, 2 for stage 3
*/

/*QUAKED trigger_win (.5 .5 .5) (-8 -8 -8) (8 8 8)
Fires its targets when the team key wins.
NOT THROUGHLY TESTED: please report whether or not this works for you.

=== KEYS ===
; target: this points to the entity to activate.
; team: the team which triggers this entity; 1 for aliens, 2 for humans
*/

/*QUAKED trigger_hurt (.5 .5 .5) ? START_OFF - SILENT NO_PROTECTION SLOW
Any player that touches this will be hurt by "dmg" points of damage once per server frame (very fast). A sizzling sound is also played while the player is being hurt.

=== KEYS ===
; dmg: number of points of damage inflicted to player per server frame (default 5 - integer values only).

=== SPAWNFLAGS ===
; START_OFF needs to be triggered (toggle) for damage
; SILENT: supresses the sizzling sound while player is being hurt.
; NO_PROTECTION: player will be hurt regardless of protection (see Notes).
; SLOW: changes the damage rate to once per second.

=== NOTES ===
; The invulnerability power-up (item_enviro) does not protect the player from damage caused by this entity regardless of whether the NO_PROTECTION spawnflag is set or not. Triggering a trigger_hurt will have no effect if the START_OFF spawnflag is not set. A trigger_hurt always starts on in the game.
*/

/*QUAKED trigger_multiple (.5 .5 .5) ?
Variable size repeatable trigger. It will fire the entities it targets when touched by player. Can be made to operate like a trigger_once entity by setting the "wait" key to -1. It can also be activated by another trigger that targets it.

=== KEYS ===
; target: this points to the entity to activate.
; targetname: activating trigger points to this.
; wait: time in seconds until trigger becomes re-triggerable after it's been touched (default 0.2, -1 = trigger once).
; random: random time variance in seconds added or subtracted from "wait" delay (default 0 - see Notes).

=== NOTES ===
; When the random key is set, its value is used to calculate a minimum and a maximum delay. The final time delay will be a random value anywhere between the minimum and maximum values: (min delay = wait - random) (max delay = wait + random).
*/

/*QUAKED trigger_push (.5 .5 .5) ?
This is used to create jump pads and launch ramps. It MUST point to a target_position entity to work. Unlike target_push, this is client side predicted.

=== KEYS ===
; target: this points to the target_position to which the player will jump.

=== NOTES ===
; To make a jump pad or launch ramp, place the target_position entity at the highest point of the jump and target it with this entity.
*/

/*QUAKED trigger_teleport (.5 .5 .5) ? SPECTATOR SPAWN_DISABLED
Touching this will teleport players to the location of the targeted misc_teleporter_dest entity. This entity allows client prediction of events.

=== KEYS ===
; target: this must point to a misc_teleporter_dest entity.

=== SPAWNFLAGS ===
; SPECTATOR: only spectators can use this teleport.
; Spectator teleporters are not normally placed in the editor, but are created
; automatically near doors to allow spectators to move through them
*/