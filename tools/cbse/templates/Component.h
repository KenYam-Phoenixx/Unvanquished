//* TODO: Add license from input file.
// TODO: Insert license statement.

//* Make sure the backend is included, even though this might have happened before.
#include "../{{files['backend']}}"
//* Make components know each other.
#include "../{{files['components']}}"

#if !defined({{component.get_name().upper()}}_COMPONENT_1_H_) && defined(ONLY_MESSAGE_COMPONENT_DECLARATION)
#define {{component.get_name().upper()}}_1_COMPONENT_H_

// //////////// //
// Custom Types //
// //////////// //



#endif
#if !defined({{component.get_name().upper()}}_COMPONENT_2_H_) && !defined(ONLY_MESSAGE_COMPONENT_DECLARATION)
#define {{component.get_name().upper()}}_2_COMPONENT_H_

class {{component.get_type_name()}}: public {{component.get_base_type_name()}} {
//* TODO: Uncomment after changing message handler visibility to protected.
//*	friend class Entity;

	public:
		// ///////////////////// //
		// Autogenerated Members //
		// ///////////////////// //

		/**
		 * @brief Default constructor of the {{component.get_type_name()}}.
		 * @param entity The entity that owns the component instance.
		{% for param in component.get_param_names() %}
			 * @param {{param}} An initialization parameter.
		{% endfor %}
		{% for required in component.get_required_components() %}
			 * @param r_{{required.get_type_name()}} A {{required.get_type_name()}} instance that this component depends on.
        {% endfor %}
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		//* {{component.get_constructor_declaration()}};
		{{component.get_type_name()}}(Entity& entity
		{%- for declaration in component.get_param_declarations() -%}
			, {{declaration}}
		{%- endfor -%}
		{%- for declaration in component.get_required_component_declarations() -%}
			, {{declaration}}
		{%- endfor -%}
		);

//* TODO: Uncomment after changing message handler visibility to protected.
//*	protected:
		{% for message in component.get_messages_to_handle() %}
			/**
			 * @brief Handle the {{message.get_name()}} message.
			{% for param in message.get_arg_names() %}
				 * @param {{param}}
			{% endfor %}
			 * @note This method is an interface for autogenerated code, do not modify its signature.
			 */
			{{message.get_return_type()}} {{message.get_handler_declaration()}};

		{% endfor %}
		// /////////////////// //
		// Handwritten Members //
		// /////////////////// //



	private:
		// /////////////////// //
		// Handwritten Members //
		// /////////////////// //


};

#endif

//* vi:ai:ts=4
